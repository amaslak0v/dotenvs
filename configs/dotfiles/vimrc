set nocompatible

" View:
" Colorscheme:
syntax on
set bg=dark
"let g:solarized_termcolors=256
"set t_Co=256 " 256 colors in terminal

" Plugin:
colorscheme gruvbox
"let g:gruvbox_(option) = '(value)'
let g:gruvbox_invert_selection = '0'
hi normal ctermbg=235

" Numbers:
" Set line numbers
set nu
" Set cursorline background color
hi CursorLine cterm=NONE ctermbg=235 guibg=#262626
" Set overlenght limits highlight
hi ColorColumn cterm=NONE ctermbg=235 guibg=#262626
" Enables cursor line position tracking:
set cursorline
" Removes the underline causes by enabling cursorline:
highlight clear CursorLine


" Configs:
" Set to auto read when a file is changed from the outside
set autoread

" Hotkeys:
" like <leader>w saves the current file
let mapleader = ","
" Copy selection into clipboard
noremap <Leader>y "*y
noremap <Leader>p "*p
noremap <Leader>Y "+y
noremap <Leader>P "+p

" Windows: 
" Change ctl + W on TAB
map <Tab> <C-W>w
" Move between panes by SHIFT 
nnoremap <S-J> <C-W><C-J>
nnoremap <S-K> <C-W><C-K>
nnoremap <S-L> <C-W><C-L>
nnoremap <S-H> <C-W><C-H>
" Map window size changes
"nnoremap <C-+> <C-

" Navigation:
" Scroll/view text by CTRL 
nnoremap <C-j> <C-d>
nnoremap <C-k> <C-u>


" Open new split panes to right and bottom, which feels more natural than Vim’s default
set splitbelow
set splitright



" Global_props:
" No_swap:
set noswapfile
" Used for command line completion
set wildmenu
set encoding=utf-8 " UTF-8 support
"set clipboard=unnamed " System Clipboard

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Tabs: Text, tab and indent related
set shiftwidth=2
set tabstop=2
" Use spaces instead of tabs
set expandtab
" Be smart when using tabs ;)
set smarttab

" Linebreak: on 500 characters
set lbr
set tw=500

" Indent:
set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines

" Visual_mode:
" Select without last character (under the cursor)
set selection=exclusive
" Visual mode pressing * or # searches for the current selection
vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>/<C-R>=@/<CR><CR>
vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@/<CR><CR>


" Search:
" Ignore case when searching
set ignorecase
" When searching try to be smart about cases 
set smartcase
" Highlight search results
set hlsearch
" Makes search act like search in modern browsers
set incsearch 
" Don't redraw while executing macros (good performance config)
set lazyredraw 
" For regular expressions turn magic on
set magic
" Show matching brackets when text indicator is over them
set showmatch 
" How many tenths of a second to blink when matching brackets
set mat=2

" Vundle_plugins:
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin() 
" Custom paths for Vundle plugins: call vundle#begin('~/some/path/here')
Plugin 'VundleVim/Vundle.vim'

"  Code:
" Folding: fold functions
Plugin 'tmhedberg/SimpylFold' 
" IndentLevels: 
Plugin 'nathanaelkane/vim-indent-guides'
" NerdCommenter: comment multiple lines
Plugin 'scrooloose/nerdcommenter'
" Linter: formatter https://github.com/prettier/vim-prettier
Plugin 'prettier/vim-prettier', { 'do': 'yarn install' }

"  Complition:
" Autocomplition_bundle: uses macvim
Plugin 'valloric/youcompleteme'
" BracketCloser: Automatic closing of quotes, parenthesis, brackets
Plugin 'raimondi/delimitmate'
" SetPaste: auto-incertion
Plugin 'roxma/vim-paste-easy'
" EndWise: Adding wisely add end" in ruby, endfunction/endif/more in vim script, etc
Plugin 'tpope/vim-endwise'

" Languages:
" Python: plugins
Plugin 'vim-scripts/indentpython.vim' " Python indents
" Plugin 'vim-syntastic/syntastic' " Python syntax
" Plugin 'nvie/vim-flake8' " PEP 8 checking 
" Surround
Plugin 'tpope/vim-surround'

" Visual:
" Themes:
Plugin 'morhetz/gruvbox'
" Statusline:
Plugin 'bling/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
" Colors:
"Plugin 'altercation/vim-colors-solarized'
Plugin 'sainnhe/edge'
"" Comfortable_motion:
"Plugin 'yuttie/comfortable-motion.vim'
"MDViewer: Preview .md files
Plugin 'JamshedVesuna/vim-markdown-preview'
" grip dependency for .md view
let vim_markdown_preview_github=1

" Navigation:
" NERDTree: 
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs' "tabs
Plugin 'xuyuanp/nerdtree-git-plugin' "git
" Fuzzy_file:
" Plugin 'kien/ctrlp.vim'
" Ranger:
" Plugin 'francoiscabrol/ranger.vim'
" Tmux:
Plugin 'christoomey/vim-tmux-navigator'

" Git:
" Git_Wrapper:
Plugin 'tpope/vim-fugitive'
" Shows_git_diff: in the 'gutter' (sign column)
Plugin 'airblade/vim-gitgutter'

call vundle#end()



" Code:
" Folding:
set foldmethod=indent
set foldlevel=99
" Folding_with_the_spacebar:
nnoremap <space> za
" See_the_docstrings_for_folded_code:
let g:SimpylFold_docstring_preview=1 

" Autocomplete_options:
" Python:
let python_highlight_all=1
au FileType python set tabstop=4

" Front:
au BufNewFile,BufRead *.js, *.html, *.css
    \ set tabstop=2
    \ set softtabstop=2
    \ set shiftwidth=2
" JenkinsFile:
au BufNewFile,BufRead *jenkinsfile* setf groovy


" Visual:
" Status_airline:
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#formatter = 'unique_tail'

"" Comfortable_motion:
"let g:comfortable_motion_scroll_down_key = "j"
"let g:comfortable_motion_scroll_up_key = "k"
"let g:comfortable_motion_friction = 80.0
"let g:comfortable_motion_air_drag = 2.0

" Code:
" Indent_guides:
"let g:indent_guides_enable_on_vim_startup = 1
" Navigation:
" NERDTree: 
" Map a specific key or shortcut to open NERDTree
map <C-n> :NERDTreeToggle<CR>
" How can I open NERDTree automatically when vim starts up on opening a directory?
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif
" How can I open a NERDTree automatically when vim starts up if no files were specified?
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" Change default arrows
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
" Close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

"" Ranger:
"" Disable dafault key mapping
"let g:ranger_map_keys = 0
"map <C-n> :Ranger<CR>

filetype plugin on    " To ignore plugin indent changes, instead use: filetype plugin on
